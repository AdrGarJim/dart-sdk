// Copyright (c) 2024, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'dart:developer';
import 'package:test/test.dart';
import 'package:vm_service/vm_service.dart';
import 'common/service_test_common.dart';
import 'common/test_helper.dart';

// AUTOGENERATED START
//
// Update these constants by running:
//
// dart pkg/vm_service/test/update_line_numbers.dart <test.dart>
//
const LINE_A = 30;
const LINE_B = 33;
// AUTOGENERATED END

extension on String? {
  bool get isNullOrEmpty {
    final str = this;
    return str == null || str.isEmpty;
  }
}

void code() {
  String? str = 'hello';
  debugger(); // LINE_A
  print(str.isNullOrEmpty);
  str = null;
  debugger(); // LINE_B
  print(str.isNullOrEmpty);
}

Future<void> Function(VmService, IsolateRef) test(
  String topFrameName,
  List<String> availableVariables,
  List<(String evaluate, String evaluationResult)> evaluations,
) {
  return (VmService service, IsolateRef isolateRef) async {
    final isolateId = isolateRef.id!;
    final stack = await service.getStack(isolateId);

    // Make sure we are in the right place.
    expect(stack.frames!.length, greaterThanOrEqualTo(1));
    expect(stack.frames![0].function!.name, topFrameName);

    // Check variables.
    expect(
      (stack.frames![0].vars ?? []).map((v) => v.name).toList(),
      equals(availableVariables),
    );

    // Evaluate.
    for (final (expression, expectedResult) in evaluations) {
      final result = await service.evaluateInFrame(
        isolateId,
        /* frame = */ 0,
        expression,
      ) as InstanceRef;
      print(result.valueAsString);
      expect(result.valueAsString, equals(expectedResult));
    }
  };
}

final tests = <IsolateTest>[
  hasStoppedAtBreakpoint,
  stoppedAtLine(LINE_A),
  test('code', [
    'str',
  ], [
    ('() { return str.isNullOrEmpty; }()', 'false'),
    ('str.isNullOrEmpty', 'false'),
  ]),
  resumeIsolate,
  hasStoppedAtBreakpoint,
  stoppedAtLine(LINE_B),
  test('code', [
    'str',
  ], [
    ('() { return str.isNullOrEmpty; }()', 'true'),
    ('str.isNullOrEmpty', 'true'),
  ]),
];

void main([args = const <String>[]]) => runIsolateTests(
      args,
      tests,
      'issue_57040_test.dart',
      testeeConcurrent: code,
      pauseOnStart: false,
      pauseOnExit: true,
    );
