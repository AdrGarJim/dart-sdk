library;
//
// Problems in library:
//
// pkg/front_end/testcases/nnbd/constant_null_check.dart:6:16: Error: Not a constant expression.
// const int b = a!;
//                ^
//
// pkg/front_end/testcases/nnbd/constant_null_check.dart:13:30: Error: Not a constant expression.
//   const Class(int? x) : y = x!;
//                              ^
//
// pkg/front_end/testcases/nnbd/constant_null_check.dart:9:17: Error: Not a constant expression.
// const int? d = c!;
//                 ^
//
import self as self;
import "dart:core" as core;

class Class extends core::Object /*hasConstConstructor*/  {
  final field core::int y;
  const constructor •(core::int? x) → self::Class
    : self::Class::y = x!, super core::Object::•()
    ;
}
static const field core::int? a = #C1;
static const field core::int b = invalid-expression "Not a constant expression.";
static const field core::int? c = #C2;
static const field core::int? d = invalid-expression "Not a constant expression.";
static const field self::Class e = invalid-expression "Not a constant expression.";
static const field self::Class f = invalid-expression "Not a constant expression.";
static method test() → dynamic {
  self::expect(42, #C1);
  self::expect(42, invalid-expression "Not a constant expression.");
  self::expect(42, invalid-expression "Not a constant expression.".{self::Class::y}{core::int});
}
static method main() → dynamic {}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual))
    throw "Expected ${expected}, actual ${actual}";
}

constants  {
  #C1 = 42
  #C2 = null
}


Constructor coverage from constants:
org-dartlang-testcase:///constant_null_check.dart:
- Class. (from org-dartlang-testcase:///constant_null_check.dart:13:9)
