library;
import self as self;

import "dart:test";

static method main() → dynamic
  ;

library;
import self as self2;
import "dart:_internal" as _in;
import "dart:core" as core;

import "dart:_internal";

@/* from org-dartlang-testcase:///patch_lib.dart */ _in::patch
class Class<T extends core::num> extends core::Object /*hasConstConstructor*/  {
  final field core::int a;
  final field self2::Class::T b;
  const constructor constConstructor(core::int a, self2::Class::T b) → self2::Class<self2::Class::T>
    : self2::Class::a = a, self2::Class::b = b, super core::Object::•()
    ;
  constructor constructor(core::int a, self2::Class::T b) → self2::Class<self2::Class::T>
    ;
  @_in::patch
  external constructor patchedConstructor(core::int a, self2::Class::T b) → self2::Class<self2::Class::T>;
  method method(core::int a) → core::int
    ;
  @_in::patch
  method /* from org-dartlang-testcase:///patch_lib.dart */ patchedMethod(core::int i) → core::int
    ;
  method /* from org-dartlang-testcase:///patch_lib.dart */ _injectedMethod(core::int i) → core::int
    ;
}
static method method(core::int a) → core::int
  ;
@_in::patch
static method /* from org-dartlang-testcase:///patch_lib.dart */ patchedMethod(core::int i) → core::int
  ;
static method /* from org-dartlang-testcase:///patch_lib.dart */ _injectedMethod(core::int i) → core::int
  ;


Extra constant evaluation status:
Evaluated: FileUriExpression @ org-dartlang-testcase:///patch_lib.dart:8:1 -> InstanceConstant(const _Patch{})
Evaluated: StaticGet @ org-dartlang-testcase:///origin_lib.dart:9:43 -> InstanceConstant(const _Patch{})
Evaluated: StaticGet @ org-dartlang-testcase:///patch_lib.dart:18:4 -> InstanceConstant(const _Patch{})
Evaluated: StaticGet @ org-dartlang-testcase:///patch_lib.dart:32:2 -> InstanceConstant(const _Patch{})
Extra constant evaluation: evaluated: 6, effectively constant: 4
