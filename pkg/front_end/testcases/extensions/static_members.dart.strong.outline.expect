library;
import self as self;
import "dart:core" as core;

class A1 extends core::Object {
  synthetic constructor •() → self::A1
    ;
}
class B1<T extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::B1<self::B1::T%>
    ;
}
extension A2 on self::A1 {
  static method method1 = self::A2|method1;
  static method method2 = self::A2|method2;
}
extension B2<T extends core::Object? = dynamic> on self::B1<T%> {
  static method method1 = self::B2|method1;
  static method method2 = self::B2|method2;
}
static extension-member method A2|method1(self::A1 o) → self::A1
  ;
static extension-member method A2|method2<T extends core::Object? = dynamic>(self::A2|method2::T% o) → self::A2|method2::T%
  ;
static extension-member method B2|method1(self::B1<dynamic> o) → self::B1<dynamic>
  ;
static extension-member method B2|method2<S extends core::Object? = dynamic>(self::B2|method2::S% o) → self::B2|method2::S%
  ;
static method main() → dynamic
  ;
