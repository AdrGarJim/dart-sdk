library;
import self as self;
import "dart:core" as core;
import "main_lib.dart" as mai;

import "org-dartlang-testcase:///main_lib.dart";

class AWith extends self::_AWith&Object&A {
  synthetic constructor •() → self::AWith
    : super self::_AWith&Object&A::•()
    ;
}
class BWith extends self::_BWith&Object&B {
  synthetic constructor •() → self::BWith
    : super self::_BWith&Object&B::•()
    ;
}
class CWith extends self::_CWith&Object&C {
  synthetic constructor •() → self::CWith
    : super self::_CWith&Object&C::•()
    ;
}
class MultipleWithMixin extends self::_MultipleWithMixin&Object&A&M {
  synthetic constructor •() → self::MultipleWithMixin
    : super self::_MultipleWithMixin&Object&A&M::•()
    ;
}
class MultipleWithAnotherClass extends self::_MultipleWithAnotherClass&Object&A&B {
  synthetic constructor •() → self::MultipleWithAnotherClass
    : super self::_MultipleWithAnotherClass&Object&A&B::•()
    ;
}
abstract class _AWith&Object&A = core::Object with mai::A /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_AWith&Object&A
    : super core::Object::•()
    ;
}
abstract class _BWith&Object&B = core::Object with mai::B /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_BWith&Object&B
    : super core::Object::•()
    ;
}
abstract class _CWith&Object&C = core::Object with mai::C /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_CWith&Object&C
    : super core::Object::•()
    ;
}
abstract class _MultipleWithMixin&Object&A = core::Object with mai::A /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_MultipleWithMixin&Object&A
    : super core::Object::•()
    ;
}
abstract class _MultipleWithMixin&Object&A&M = self::_MultipleWithMixin&Object&A with mai::M /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_MultipleWithMixin&Object&A&M
    : super self::_MultipleWithMixin&Object&A::•()
    ;
}
abstract class _MultipleWithAnotherClass&Object&A = core::Object with mai::A /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_MultipleWithAnotherClass&Object&A
    : super core::Object::•()
    ;
}
abstract class _MultipleWithAnotherClass&Object&A&B = self::_MultipleWithAnotherClass&Object&A with mai::B /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_MultipleWithAnotherClass&Object&A&B
    : super self::_MultipleWithAnotherClass&Object&A::•()
    ;
}
