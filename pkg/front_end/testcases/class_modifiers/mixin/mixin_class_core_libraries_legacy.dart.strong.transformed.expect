library;
//
// Problems in library:
//
// pkg/front_end/testcases/class_modifiers/mixin/mixin_class_core_libraries_legacy.dart:14:7: Error: Can't use 'Error' as a mixin because it has constructors.
// class B with Error {} /* Error */
//       ^
// sdk/lib/core/errors.dart:*: Context: This constructor prevents using 'Error' as a mixin.
//   Error(); // Prevent use as mixin.
//   ^
//
import self as self;
import "dart:core" as core;
import "dart:_internal" as _in;

abstract class _A&Object&Comparable extends core::Object implements core::Comparable<core::int> /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_A&Object&Comparable
    : super core::Object::•()
    ;
  abstract method /* from org-dartlang-sdk:///sdk/lib/core/comparable.dart */ compareTo(covariant-by-class core::int other) → core::int;
}
class A extends self::_A&Object&Comparable {
  synthetic constructor •() → self::A
    : super self::_A&Object&Comparable::•()
    ;
  method compareTo(covariant-by-class core::int x) → core::int
    return 0;
}
abstract class _B&Object&Error extends core::Object implements core::Error /*isAnonymousMixin,isEliminatedMixin*/  {
  @#C3
  field core::StackTrace? _stackTrace = null /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/errors_patch.dart */;
  synthetic constructor •() → self::_B&Object&Error
    : super core::Object::•()
    ;
  @#C4
  get /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/errors_patch.dart */ stackTrace() → core::StackTrace?
    return this.{core::Error::_stackTrace}{core::StackTrace?};
}
class B extends self::_B&Object&Error {
  synthetic constructor •() → self::B
    : super self::_B&Object&Error::•()
    ;
}

constants  {
  #C1 = "vm:entry-point"
  #C2 = null
  #C3 = core::pragma {name:#C1, options:#C2}
  #C4 = _in::_Patch {}
}
