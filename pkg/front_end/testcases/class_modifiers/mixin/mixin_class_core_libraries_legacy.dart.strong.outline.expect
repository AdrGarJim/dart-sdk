library;
//
// Problems in library:
//
// pkg/front_end/testcases/class_modifiers/mixin/mixin_class_core_libraries_legacy.dart:14:7: Error: Can't use 'Error' as a mixin because it has constructors.
// class B with Error {} /* Error */
//       ^
// sdk/lib/core/errors.dart:*: Context: This constructor prevents using 'Error' as a mixin.
//   Error(); // Prevent use as mixin.
//   ^
//
import self as self;
import "dart:core" as core;

class A extends self::_A&Object&Comparable {
  synthetic constructor •() → self::A
    ;
  method compareTo(covariant-by-class core::int x) → core::int
    ;
}
class B extends self::_B&Object&Error {
  synthetic constructor •() → self::B
    ;
}
abstract class _A&Object&Comparable = core::Object with core::Comparable<core::int> /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_A&Object&Comparable
    : super core::Object::•()
    ;
  abstract synthetic mixin-stub method compareTo(covariant-by-class core::int other) → core::int; -> core::Comparable::compareTo
}
abstract class _B&Object&Error = core::Object with core::Error /*isAnonymousMixin*/  {
  synthetic constructor •() → self::_B&Object&Error
    : super core::Object::•()
    ;
  synthetic mixin-super-stub get _stackTrace() → core::StackTrace?
    return super.{core::Error::_stackTrace};
  synthetic mixin-super-stub set _stackTrace(core::StackTrace? value) → void
    return super.{core::Error::_stackTrace} = value;
  synthetic mixin-super-stub get stackTrace() → core::StackTrace?
    return super.{core::Error::stackTrace};
}
