library;
import self as self;
import "dart:core" as core;

class Verifier extends core::Object /*hasConstConstructor*/  {
  const constructor test1() → self::Verifier
    : assert(core::identical(#C2, #C2)), super core::Object::•()
    ;
  const constructor test2() → self::Verifier
    : assert(core::identical(#C3, #C3)), super core::Object::•()
    ;
}
static const field core::int? expr1 = #C1;
static const field core::List<core::int> literal1 = #C2;
static const field core::String? expr2 = #C4;
static const field core::Set<core::String> literal2 = #C3;
static field self::Verifier test1 = #C5;
static field self::Verifier test2 = #C5;

constants  {
  #C1 = 5
  #C2 = <core::int>[#C1]
  #C3 = <core::String>{}
  #C4 = null
  #C5 = self::Verifier {}
}


Constructor coverage from constants:
org-dartlang-testcase:///constant_collections.dart:
- Verifier.test1 (from org-dartlang-testcase:///constant_collections.dart:12:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
- Verifier.test2 (from org-dartlang-testcase:///constant_collections.dart:14:9)
