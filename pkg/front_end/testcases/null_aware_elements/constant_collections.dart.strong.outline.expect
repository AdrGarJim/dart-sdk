library;
import self as self;
import "dart:core" as core;

class Verifier extends core::Object /*hasConstConstructor*/  {
  const constructor test1() → self::Verifier
    : assert(core::identical(self::literal1, const <core::int>[5])), super core::Object::•()
    ;
  const constructor test2() → self::Verifier
    : assert(core::identical(self::literal2, const <core::String>{})), super core::Object::•()
    ;
}
static const field core::int? expr1 = 5;
static const field core::List<core::int> literal1 = let final core::int? #t1 = self::expr1 in #t1 == null ?{core::Iterable<core::int>} const <core::int>[] : const <core::int>[#t1{core::int}];
static const field core::String? expr2 = null;
static const field core::Set<core::String> literal2 = let final core::String? #t2 = self::expr2 in #t2 == null ?{core::Iterable<core::String>} const <core::String>{} : const <core::String>{#t2{core::String}};
static field self::Verifier test1;
static field self::Verifier test2;


Extra constant evaluation status:
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:12:35 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///constant_collections.dart:14:35 -> BoolConstant(true)
Evaluated: ListConcatenation @ org-dartlang-testcase:///constant_collections.dart:6:33 -> ListConstant(const <int>[5])
Evaluated: SetConcatenation @ org-dartlang-testcase:///constant_collections.dart:9:38 -> SetConstant(const <String>{})
Extra constant evaluation: evaluated: 4, effectively constant: 4
