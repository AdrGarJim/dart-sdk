main = <No Member>;
library from "org-dartlang-test:///a.dart" as a {

  import "org-dartlang-test:///b.dart";

  abstract class MyClassA<C extends b::MyClassB> extends dart.core::Object {
    synthetic constructor •() → a::MyClassA<a::MyClassA::C>
      : super dart.core::Object::•()
      ;
  }
}
library from "org-dartlang-test:///b.dart" as b {

  import "org-dartlang-test:///a.dart";

  abstract class MyClassB extends dart.core::Object {
    synthetic constructor •() → b::MyClassB
      : super dart.core::Object::•()
      ;
  }
  class MyInstance<C extends b::MyClassB, A extends a::MyClassA<b::MyClassB>> extends dart.core::Object /*hasConstConstructor*/  {
    final field b::MyInstance::C? myClassC;
    final field b::MyInstance::A? myClassA;
    const constructor •(b::MyInstance::C? myClassC, b::MyInstance::A? myClassA) → b::MyInstance<b::MyInstance::C, b::MyInstance::A>
      : b::MyInstance::myClassC = myClassC, b::MyInstance::myClassA = myClassA, super dart.core::Object::•()
      ;
  }
}
