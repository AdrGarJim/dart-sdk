library;
//
// Problems in library:
//
// pkg/front_end/testcases/general/type_parameter_annotations.dart:11:25: Error: Undefined name 'foo'.
// class Class<@Annotation(foo) T> {
//                         ^^^
//
// pkg/front_end/testcases/general/type_parameter_annotations.dart:15:27: Error: Undefined name 'foo'.
// void function<@Annotation(foo) T>(dynamic foo) {
//                           ^^^
//
// pkg/front_end/testcases/general/type_parameter_annotations.dart:19:33: Error: Undefined name 'foo'.
// extension Extension<@Annotation(foo) T> on Class<T> {
//                                 ^^^
//
// pkg/front_end/testcases/general/type_parameter_annotations.dart:22:56: Error: Not a constant expression.
//   void extensionMethod<@Annotation(foo) T, @Annotation(bar) U>() {}
//                                                        ^^^
//
// pkg/front_end/testcases/general/type_parameter_annotations.dart:26:27: Error: Not a constant expression.
//   void method<@Annotation(foo) T, @Annotation(bar) U>(dynamic foo) {
//                           ^^^
//
// pkg/front_end/testcases/general/type_parameter_annotations.dart:33:25: Error: Undefined name 'foo'.
// mixin Mixin<@Annotation(foo) T> {
//                         ^^^
//
// pkg/front_end/testcases/general/type_parameter_annotations.dart:37:29: Error: Undefined name 'foo'.
// typedef Typedef<@Annotation(foo) T> = void Function<foo>();
//                             ^^^
//
import self as self;
import "dart:core" as core;

typedef Typedef<@self::Annotation::•(invalid-expression "pkg/front_end/testcases/general/type_parameter_annotations.dart:37:29: Error: Undefined name 'foo'.
typedef Typedef<@Annotation(foo) T> = void Function<foo>();
                            ^^^") unrelated T extends core::Object? = dynamic> = <foo extends core::Object? = dynamic>() → void;
class Annotation extends core::Object /*hasConstConstructor*/  {
  const constructor •(dynamic d) → self::Annotation
    : super core::Object::•()
    ;
}
class Class<@self::Annotation::•(invalid-expression "pkg/front_end/testcases/general/type_parameter_annotations.dart:11:25: Error: Undefined name 'foo'.
class Class<@Annotation(foo) T> {
                        ^^^") T extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::Class<self::Class::T%>
    ;
  static method foo() → void
    ;
}
class C extends core::Object {
  synthetic constructor •() → self::C
    ;
  method method<@self::Annotation::•(invalid-expression "pkg/front_end/testcases/general/type_parameter_annotations.dart:26:27: Error: Not a constant expression.
  void method<@Annotation(foo) T, @Annotation(bar) U>(dynamic foo) {
                          ^^^") T extends core::Object? = dynamic, @self::Annotation::•(self::C::bar) U extends core::Object? = dynamic>(dynamic foo) → void
    ;
  static method bar() → void
    ;
}
abstract class Mixin<@self::Annotation::•(invalid-expression "pkg/front_end/testcases/general/type_parameter_annotations.dart:33:25: Error: Undefined name 'foo'.
mixin Mixin<@Annotation(foo) T> {
                        ^^^") T extends core::Object? = dynamic> extends core::Object /*isMixinDeclaration*/  {
  static method foo() → void
    ;
}
extension Extension<@self::Annotation::•(invalid-expression "pkg/front_end/testcases/general/type_parameter_annotations.dart:19:33: Error: Undefined name 'foo'.
extension Extension<@Annotation(foo) T> on Class<T> {
                                ^^^") T extends core::Object? = dynamic> on self::Class<T%> {
  static method foo = self::Extension|foo;
  method extensionMethod = self::Extension|extensionMethod;
  method tearoff extensionMethod = self::Extension|get#extensionMethod;
}
static method function<@self::Annotation::•(invalid-expression "pkg/front_end/testcases/general/type_parameter_annotations.dart:15:27: Error: Undefined name 'foo'.
void function<@Annotation(foo) T>(dynamic foo) {
                          ^^^") T extends core::Object? = dynamic>(dynamic foo) → void
  ;
static extension-member method Extension|foo() → void
  ;
static extension-member method Extension|extensionMethod<#T extends core::Object? = dynamic, @self::Annotation::•(self::Extension|foo) T extends core::Object? = dynamic, @self::Annotation::•(invalid-expression "pkg/front_end/testcases/general/type_parameter_annotations.dart:22:56: Error: Not a constant expression.
  void extensionMethod<@Annotation(foo) T, @Annotation(bar) U>() {}
                                                       ^^^") U extends core::Object? = dynamic>(lowered final self::Class<self::Extension|extensionMethod::#T%> #this) → void
  ;
static extension-member method Extension|get#extensionMethod<#T extends core::Object? = dynamic>(lowered final self::Class<self::Extension|get#extensionMethod::#T%> #this) → <T extends core::Object? = dynamic, U extends core::Object? = dynamic>() → void
  return <T extends core::Object? = dynamic, U extends core::Object? = dynamic>() → void => self::Extension|extensionMethod<self::Extension|get#extensionMethod::#T%, T%, U%>(#this);


Extra constant evaluation status:
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///type_parameter_annotations.dart:26:36 -> InstanceConstant(const Annotation{})
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///type_parameter_annotations.dart:22:25 -> InstanceConstant(const Annotation{})
Extra constant evaluation: evaluated: 12, effectively constant: 2
