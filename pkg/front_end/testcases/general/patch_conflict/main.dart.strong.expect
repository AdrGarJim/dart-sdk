library;
import self as self;

import "dart:test";

static method main() → dynamic {}

library;
//
// Problems in library:
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:30:6: Error: 'existingOriginMethod' is already declared in this scope.
// void existingOriginMethod() {} /* Error: conflict with origin method */
//      ^^^^^^^^^^^^^^^^^^^^
// pkg/front_end/testcases/general/patch_conflict/origin_lib.dart:13:6: Context: Previous declaration of 'existingOriginMethod'.
// void existingOriginMethod() {}
//      ^^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:30:6: Error: Can't inject public 'existingOriginMethod' into 'dart:test'.
// Make 'existingOriginMethod' private, or make sure injected library has "dart" scheme and is private (e.g. "dart:_internal").
// void existingOriginMethod() {} /* Error: conflict with origin method */
//      ^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:32:7: Error: 'existingOriginDeclaration' is already declared in this scope.
// class existingOriginDeclaration {} /* Error: conflict with origin declaration */
//       ^^^^^^^^^^^^^^^^^^^^^^^^^
// pkg/front_end/testcases/general/patch_conflict/origin_lib.dart:15:6: Context: Previous declaration of 'existingOriginDeclaration'.
// void existingOriginDeclaration() {}
//      ^^^^^^^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:32:7: Error: Can't inject public 'existingOriginDeclaration' into 'dart:test'.
// Make 'existingOriginDeclaration' private, or make sure injected library has "dart" scheme and is private (e.g. "dart:_internal").
// class existingOriginDeclaration {} /* Error: conflict with origin declaration */
//       ^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:34:7: Error: 'ExistingOriginClass' is already declared in this scope.
// class ExistingOriginClass {} /* Error: conflict with origin class */
//       ^^^^^^^^^^^^^^^^^^^
// pkg/front_end/testcases/general/patch_conflict/origin_lib.dart:17:7: Context: Previous declaration of 'ExistingOriginClass'.
// class ExistingOriginClass {}
//       ^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:34:7: Error: Can't inject public 'ExistingOriginClass' into 'dart:test'.
// Make 'ExistingOriginClass' private, or make sure injected library has "dart" scheme and is private (e.g. "dart:_internal").
// class ExistingOriginClass {} /* Error: conflict with origin class */
//       ^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:22:6: Error: Patch member 'missingOriginMethod' doesn't match a member in the origin library.
// Try changing the name to an existing member or removing the '@patch' annotation.
// void missingOriginMethod() {} /* Error: missing origin method */
//      ^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:22:6: Error: Can't inject public 'missingOriginMethod' into 'dart:test'.
// Make 'missingOriginMethod' private, or make sure injected library has "dart" scheme and is private (e.g. "dart:_internal").
// void missingOriginMethod() {} /* Error: missing origin method */
//      ^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:25:7: Error: Patch class 'MissingOriginClass' doesn't match a class in the origin library.
// Try changing the name to an existing class or removing the '@patch' annotation.
// class MissingOriginClass {} /* Error: missing origin class */
//       ^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:25:7: Error: Can't inject public 'MissingOriginClass' into 'dart:test'.
// Make 'MissingOriginClass' private, or make sure injected library has "dart" scheme and is private (e.g. "dart:_internal").
// class MissingOriginClass {} /* Error: missing origin class */
//       ^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:28:11: Error: Patch 'MissingOriginExtension' doesn't match a declaration in the origin library.
// Try changing the name to an existing declaration or removing the '@patch' annotation.
// extension MissingOriginExtension on int {} /* Error: missing origin extension */
//           ^^^^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:28:11: Error: Can't inject public 'MissingOriginExtension' into 'dart:test'.
// Make 'MissingOriginExtension' private, or make sure injected library has "dart" scheme and is private (e.g. "dart:_internal").
// extension MissingOriginExtension on int {} /* Error: missing origin extension */
//           ^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:13:3: Error: 'Class.existingOriginConstructor' is already declared in this scope.
//   Class.existingOriginConstructor(); /* Error: conflict with origin class */
//   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// pkg/front_end/testcases/general/patch_conflict/origin_lib.dart:8:3: Context: Previous declaration of 'Class.existingOriginConstructor'.
//   Class.existingOriginConstructor();
//   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:18:8: Error: 'existingOriginMethod' is already declared in this scope.
//   void existingOriginMethod() {} /* Error: conflict with origin method */
//        ^^^^^^^^^^^^^^^^^^^^
// pkg/front_end/testcases/general/patch_conflict/origin_lib.dart:10:8: Context: Previous declaration of 'existingOriginMethod'.
//   void existingOriginMethod() {}
//        ^^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:11:3: Error: Patch member 'Class.missingOriginConstructor' doesn't match a member in the origin class.
// Try changing the name to an existing member or removing the '@patch' annotation.
//   Class.missingOriginConstructor(); /* Error: missing origin class */
//   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/patch_conflict/patch_lib.dart:16:8: Error: Patch member 'missingOriginMethod' doesn't match a member in the origin class.
// Try changing the name to an existing member or removing the '@patch' annotation.
//   void missingOriginMethod() {} /* Error: missing origin method */
//        ^^^^^^^^^^^^^^^^^^^
//
import self as self2;
import "dart:_internal" as _in;
import "dart:core" as core;

import "dart:_internal";

@/* from org-dartlang-testcase:///patch_lib.dart */ #C1
class Class extends core::Object {
  constructor •() → self2::Class
    : super core::Object::•()
    ;
  constructor existingOriginConstructor() → self2::Class
    : super core::Object::•()
    ;
  @#C1
  constructor /* from org-dartlang-testcase:///patch_lib.dart */ missingOriginConstructor() → self2::Class
    : super core::Object::•()
    ;
  method existingOriginMethod() → void {}
  @#C1
  method /* from org-dartlang-testcase:///patch_lib.dart */ missingOriginMethod() → void {}
}
class existingOriginDeclaration#1 extends core::Object { // from org-dartlang-testcase:///patch_lib.dart
  synthetic constructor •() → self2::existingOriginDeclaration#1
    : super core::Object::•()
    ;
}
class ExistingOriginClass#1 extends core::Object { // from org-dartlang-testcase:///patch_lib.dart
  synthetic constructor •() → self2::ExistingOriginClass#1
    : super core::Object::•()
    ;
}
class ExistingOriginClass extends core::Object {
  synthetic constructor •() → self2::ExistingOriginClass
    : super core::Object::•()
    ;
}
@#C1
class _#MissingOriginClass#augmentationWithoutOrigin0 extends core::Object { // from org-dartlang-testcase:///patch_lib.dart
  synthetic constructor •() → self2::_#MissingOriginClass#augmentationWithoutOrigin0
    : super core::Object::•()
    ;
}
@#C1
extension MissingOriginExtension on core::int { // from org-dartlang-testcase:///patch_lib.dart
}
static method existingOriginMethod() → void {}
static method existingOriginDeclaration() → void {}
@#C1
static method /* from org-dartlang-testcase:///patch_lib.dart */ missingOriginMethod() → void {}

constants  {
  #C1 = _in::_Patch {}
}
