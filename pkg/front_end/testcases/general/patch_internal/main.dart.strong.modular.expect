library;
import self as self;
import "dart:_test_internal" as _te;

import "dart:test";

static method main() → dynamic {
  new _te::ClassImpl::•();
}

library;
import self as self2;
import "dart:_internal" as _in;
import "dart:core" as core;
import "dart:_test_internal" as _te;

import "dart:_internal";
import "dart:_test_internal";

@/* from org-dartlang-testcase:///patch_lib.dart */ #C1
class Class extends core::Object {
  @#C1
  static factory /* from org-dartlang-testcase:///patch_lib.dart */ •() → self2::Class /* redirection-target: _te::ClassImpl::• */
    return new _te::ClassImpl::•();
}

library /*isUnsupported*/;
import self as _te;
import "dart:core" as core;
import "dart:test" as self2;

import "dart:test";

class ClassImpl extends core::Object implements self2::Class {
  synthetic constructor •() → _te::ClassImpl
    : super core::Object::•()
    ;
}

constants  {
  #C1 = _in::_Patch {}
}
