library;
//
// Problems in library:
//
// pkg/front_end/testcases/regress/annotation_on_type_parameter_name_extension_type_constructor.dart:10:14: Error: Constructors can't have type parameters.
// Try removing the type parameters.
//   FooBad1.bar<T>(T theFoo) : foo = theFoo as int;
//              ^^^
//
// pkg/front_end/testcases/regress/annotation_on_type_parameter_name_extension_type_constructor.dart:14:14: Error: Constructors can't have type parameters.
// Try removing the type parameters.
//   FooBad2.bar<T2>(T1 theFoo1, T2 theFoo2) : foo = (theFoo1 as int) + (theFoo2 as int);
//              ^^^^
//
// pkg/front_end/testcases/regress/annotation_on_type_parameter_name_extension_type_constructor.dart:18:14: Error: Constructors can't have type parameters.
// Try removing the type parameters.
//   FooBad3.bar<T2, T3>(T1 theFoo1, T2 theFoo2, T3 theFoo3) : foo = (theFoo1 as int) + (theFoo2 as int) + (theFoo3 as int);
//              ^^^^^^^^
//
// pkg/front_end/testcases/regress/annotation_on_type_parameter_name_extension_type_constructor.dart:22:14: Error: Constructors can't have type parameters.
// Try removing the type parameters.
//   FooBad4.bar<T3>(T1 theFoo1, T2 theFoo2, T3 theFoo3) : foo = (theFoo1 as int) + (theFoo2 as int) + (theFoo3 as int);
//              ^^^^
//
// pkg/front_end/testcases/regress/annotation_on_type_parameter_name_extension_type_constructor.dart:10:18: Error: Type 'T' not found.
//   FooBad1.bar<T>(T theFoo) : foo = theFoo as int;
//                  ^
//
// pkg/front_end/testcases/regress/annotation_on_type_parameter_name_extension_type_constructor.dart:14:31: Error: Type 'T2' not found.
//   FooBad2.bar<T2>(T1 theFoo1, T2 theFoo2) : foo = (theFoo1 as int) + (theFoo2 as int);
//                               ^^
//
// pkg/front_end/testcases/regress/annotation_on_type_parameter_name_extension_type_constructor.dart:18:35: Error: Type 'T2' not found.
//   FooBad3.bar<T2, T3>(T1 theFoo1, T2 theFoo2, T3 theFoo3) : foo = (theFoo1 as int) + (theFoo2 as int) + (theFoo3 as int);
//                                   ^^
//
// pkg/front_end/testcases/regress/annotation_on_type_parameter_name_extension_type_constructor.dart:18:47: Error: Type 'T3' not found.
//   FooBad3.bar<T2, T3>(T1 theFoo1, T2 theFoo2, T3 theFoo3) : foo = (theFoo1 as int) + (theFoo2 as int) + (theFoo3 as int);
//                                               ^^
//
// pkg/front_end/testcases/regress/annotation_on_type_parameter_name_extension_type_constructor.dart:22:43: Error: Type 'T3' not found.
//   FooBad4.bar<T3>(T1 theFoo1, T2 theFoo2, T3 theFoo3) : foo = (theFoo1 as int) + (theFoo2 as int) + (theFoo3 as int);
//                                           ^^
//
import self as self;
import "dart:core" as core;

extension type FooOK<T extends core::Object? = dynamic>(core::int foo) {
  abstract extension-type-member representation-field get foo() → core::int;
  constructor • = self::FooOK|constructor#;
  constructor tearoff • = self::FooOK|constructor#_#new#tearOff;
  constructor bar = self::FooOK|constructor#bar;
  constructor tearoff bar = self::FooOK|constructor#_#bar#tearOff;
}
extension type FooBad1(core::int foo) {
  abstract extension-type-member representation-field get foo() → core::int;
  constructor • = self::FooBad1|constructor#;
  constructor tearoff • = self::FooBad1|constructor#_#new#tearOff;
  constructor bar = self::FooBad1|constructor#bar;
  constructor tearoff bar = self::FooBad1|constructor#_#bar#tearOff;
}
extension type FooBad2<T1 extends core::Object? = dynamic>(core::int foo) {
  abstract extension-type-member representation-field get foo() → core::int;
  constructor • = self::FooBad2|constructor#;
  constructor tearoff • = self::FooBad2|constructor#_#new#tearOff;
  constructor bar = self::FooBad2|constructor#bar;
  constructor tearoff bar = self::FooBad2|constructor#_#bar#tearOff;
}
extension type FooBad3<T1 extends core::Object? = dynamic>(core::int foo) {
  abstract extension-type-member representation-field get foo() → core::int;
  constructor • = self::FooBad3|constructor#;
  constructor tearoff • = self::FooBad3|constructor#_#new#tearOff;
  constructor bar = self::FooBad3|constructor#bar;
  constructor tearoff bar = self::FooBad3|constructor#_#bar#tearOff;
}
extension type FooBad4<T1 extends core::Object? = dynamic, T2 extends core::Object? = dynamic>(core::int foo) {
  abstract extension-type-member representation-field get foo() → core::int;
  constructor • = self::FooBad4|constructor#;
  constructor tearoff • = self::FooBad4|constructor#_#new#tearOff;
  constructor bar = self::FooBad4|constructor#bar;
  constructor tearoff bar = self::FooBad4|constructor#_#bar#tearOff;
}
static extension-type-member method FooOK|constructor#<T extends core::Object? = dynamic>(core::int foo) → self::FooOK<self::FooOK|constructor#::T%>% /* erasure=core::int, declared=! */
  ;
static extension-type-member synthetic method FooOK|constructor#_#new#tearOff<T extends core::Object? = dynamic>(core::int foo) → self::FooOK<self::FooOK|constructor#_#new#tearOff::T%>% /* erasure=core::int, declared=! */
  return self::FooOK|constructor#<self::FooOK|constructor#_#new#tearOff::T%>(foo);
static extension-type-member method FooOK|constructor#bar<T extends core::Object? = dynamic>(self::FooOK|constructor#bar::T% theFoo) → self::FooOK<self::FooOK|constructor#bar::T%>% /* erasure=core::int, declared=! */
  ;
static extension-type-member synthetic method FooOK|constructor#_#bar#tearOff<T extends core::Object? = dynamic>(self::FooOK|constructor#_#bar#tearOff::T% theFoo) → self::FooOK<self::FooOK|constructor#_#bar#tearOff::T%>% /* erasure=core::int, declared=! */
  return self::FooOK|constructor#bar<self::FooOK|constructor#_#bar#tearOff::T%>(theFoo);
static extension-type-member method FooBad1|constructor#(core::int foo) → self::FooBad1% /* erasure=core::int, declared=! */
  ;
static extension-type-member synthetic method FooBad1|constructor#_#new#tearOff(core::int foo) → self::FooBad1% /* erasure=core::int, declared=! */
  return self::FooBad1|constructor#(foo);
static extension-type-member method FooBad1|constructor#bar(invalid-type theFoo) → self::FooBad1% /* erasure=core::int, declared=! */
  ;
static extension-type-member synthetic method FooBad1|constructor#_#bar#tearOff(invalid-type theFoo) → self::FooBad1% /* erasure=core::int, declared=! */
  return self::FooBad1|constructor#bar(theFoo);
static extension-type-member method FooBad2|constructor#<T1 extends core::Object? = dynamic>(core::int foo) → self::FooBad2<self::FooBad2|constructor#::T1%>% /* erasure=core::int, declared=! */
  ;
static extension-type-member synthetic method FooBad2|constructor#_#new#tearOff<T1 extends core::Object? = dynamic>(core::int foo) → self::FooBad2<self::FooBad2|constructor#_#new#tearOff::T1%>% /* erasure=core::int, declared=! */
  return self::FooBad2|constructor#<self::FooBad2|constructor#_#new#tearOff::T1%>(foo);
static extension-type-member method FooBad2|constructor#bar<T1 extends core::Object? = dynamic>(self::FooBad2|constructor#bar::T1% theFoo1, invalid-type theFoo2) → self::FooBad2<self::FooBad2|constructor#bar::T1%>% /* erasure=core::int, declared=! */
  ;
static extension-type-member synthetic method FooBad2|constructor#_#bar#tearOff<T1 extends core::Object? = dynamic>(self::FooBad2|constructor#_#bar#tearOff::T1% theFoo1, invalid-type theFoo2) → self::FooBad2<self::FooBad2|constructor#_#bar#tearOff::T1%>% /* erasure=core::int, declared=! */
  return self::FooBad2|constructor#bar<self::FooBad2|constructor#_#bar#tearOff::T1%>(theFoo1, theFoo2);
static extension-type-member method FooBad3|constructor#<T1 extends core::Object? = dynamic>(core::int foo) → self::FooBad3<self::FooBad3|constructor#::T1%>% /* erasure=core::int, declared=! */
  ;
static extension-type-member synthetic method FooBad3|constructor#_#new#tearOff<T1 extends core::Object? = dynamic>(core::int foo) → self::FooBad3<self::FooBad3|constructor#_#new#tearOff::T1%>% /* erasure=core::int, declared=! */
  return self::FooBad3|constructor#<self::FooBad3|constructor#_#new#tearOff::T1%>(foo);
static extension-type-member method FooBad3|constructor#bar<T1 extends core::Object? = dynamic>(self::FooBad3|constructor#bar::T1% theFoo1, invalid-type theFoo2, invalid-type theFoo3) → self::FooBad3<self::FooBad3|constructor#bar::T1%>% /* erasure=core::int, declared=! */
  ;
static extension-type-member synthetic method FooBad3|constructor#_#bar#tearOff<T1 extends core::Object? = dynamic>(self::FooBad3|constructor#_#bar#tearOff::T1% theFoo1, invalid-type theFoo2, invalid-type theFoo3) → self::FooBad3<self::FooBad3|constructor#_#bar#tearOff::T1%>% /* erasure=core::int, declared=! */
  return self::FooBad3|constructor#bar<self::FooBad3|constructor#_#bar#tearOff::T1%>(theFoo1, theFoo2, theFoo3);
static extension-type-member method FooBad4|constructor#<T1 extends core::Object? = dynamic, T2 extends core::Object? = dynamic>(core::int foo) → self::FooBad4<self::FooBad4|constructor#::T1%, self::FooBad4|constructor#::T2%>% /* erasure=core::int, declared=! */
  ;
static extension-type-member synthetic method FooBad4|constructor#_#new#tearOff<T1 extends core::Object? = dynamic, T2 extends core::Object? = dynamic>(core::int foo) → self::FooBad4<self::FooBad4|constructor#_#new#tearOff::T1%, self::FooBad4|constructor#_#new#tearOff::T2%>% /* erasure=core::int, declared=! */
  return self::FooBad4|constructor#<self::FooBad4|constructor#_#new#tearOff::T1%, self::FooBad4|constructor#_#new#tearOff::T2%>(foo);
static extension-type-member method FooBad4|constructor#bar<T1 extends core::Object? = dynamic, T2 extends core::Object? = dynamic>(self::FooBad4|constructor#bar::T1% theFoo1, self::FooBad4|constructor#bar::T2% theFoo2, invalid-type theFoo3) → self::FooBad4<self::FooBad4|constructor#bar::T1%, self::FooBad4|constructor#bar::T2%>% /* erasure=core::int, declared=! */
  ;
static extension-type-member synthetic method FooBad4|constructor#_#bar#tearOff<T1 extends core::Object? = dynamic, T2 extends core::Object? = dynamic>(self::FooBad4|constructor#_#bar#tearOff::T1% theFoo1, self::FooBad4|constructor#_#bar#tearOff::T2% theFoo2, invalid-type theFoo3) → self::FooBad4<self::FooBad4|constructor#_#bar#tearOff::T1%, self::FooBad4|constructor#_#bar#tearOff::T2%>% /* erasure=core::int, declared=! */
  return self::FooBad4|constructor#bar<self::FooBad4|constructor#_#bar#tearOff::T1%, self::FooBad4|constructor#_#bar#tearOff::T2%>(theFoo1, theFoo2, theFoo3);
