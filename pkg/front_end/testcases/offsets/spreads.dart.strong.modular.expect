library;
import self as self;
import "dart:core" as core;
import "dart:collection" as col;

[222]static method main([240] core::List<core::String> args) → void {
[262]  [262] core::Set<core::String> fooSet = [271] [271] block {
[271]    [271] final core::Set<core::String> #t1 = [271] [271] col::LinkedHashSet::of [271]<core::String>([280] args);
[290]    [290] [290] [-1] [-1] #t1.{core::Set::add}{Invariant}[-1]([290] "hello"){(core::String) → core::bool};
[317]    [317] [317] [-1] [-1] #t1.{core::Set::addAll}{Invariant}[-1]([317] [306] [306]<core::String, core::String>{[310] [307] [307] "x": [312] [312] "y"}.{core::Map::keys}{core::Iterable<core::String>}){(core::Iterable<core::String>) → void};
[327]    for ([339] core::String s in [344] [344] args)
[353]      [353] [353] [-1] [-1] #t1.{core::Set::addAll}{Invariant}[-1]([353] block {
[-1]        [-1] final core::Set<core::String> #t2 = [-1] [-1] col::LinkedHashSet::• [-1]<core::String>();
[365]        [365] [365] [-1] [-1] #t2.{core::Set::add}{Invariant}[-1]([365] "${[363] [363] s}"){(core::String) → core::bool};
[381]        [381] [381] [-1] [-1] #t2.{core::Set::add}{Invariant}[-1]([381] "${[376] [376] s}_2"){(core::String) → core::bool};
      } =>[-1] [-1] #t2){(core::Iterable<core::String>) → void};
[394]    if([410] [410] [403] [403] [398] [398] args.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} [413] [413] 42)
[420]      [420] [420] [-1] [-1] #t1.{core::Set::addAll}{Invariant}[-1]([420] block {
[-1]        [-1] final core::Set<core::String> #t3 = [-1] [-1] col::LinkedHashSet::• [-1]<core::String>();
[428]        [428] [428] [-1] [-1] #t3.{core::Set::add}{Invariant}[-1]([428] "length"){(core::String) → core::bool};
[444]        [444] [444] [-1] [-1] #t3.{core::Set::add}{Invariant}[-1]([444] "is"){(core::String) → core::bool};
[456]        [456] [456] [-1] [-1] #t3.{core::Set::add}{Invariant}[-1]([456] "42"){(core::String) → core::bool};
      } =>[-1] [-1] #t3){(core::Iterable<core::String>) → void};
  } =>[271] [271] #t1;
[476]  [476] [476] core::print [481]([482] fooSet);
[506]  [506] core::Set<core::String> fooSet2 = [516] [516] block {
[516]    [516] final core::Set<core::String> #t4 = [516] [516] col::LinkedHashSet::of [516]<core::String>([525] args);
[549]    [549] [549] [-1] [-1] #t4.{core::Set::addAll}{Invariant}[-1]([549] [538] [538]<core::String, core::String>{[542] [539] [539] "x": [544] [544] "y"}.{core::Map::keys}{core::Iterable<core::String>}){(core::Iterable<core::String>) → void};
[559]    for ([571] core::String s in [576] [576] args)
[585]      for ([585] final has-declared-initializer dynamic #t5 in [585] [585] block {
[-1]        [-1] final core::Set<core::String> #t6 = [-1] [-1] col::LinkedHashSet::• [-1]<core::String>();
[597]        [597] [597] [-1] [-1] #t6.{core::Set::add}{Invariant}[-1]([597] "${[595] [595] s}"){(core::String) → core::bool};
[613]        [613] [613] [-1] [-1] #t6.{core::Set::add}{Invariant}[-1]([613] "${[608] [608] s}_2"){(core::String) → core::bool};
      } =>[-1] [-1] #t6) {
[585]        [585] final core::String #t7 = [585] [585] [585] [585] #t5 as{TypeError} core::String;
[585]        [585] [585] [-1] [-1] #t4.{core::Set::add}{Invariant}[-1]([585] #t7){(core::String) → core::bool};
      }
[626]    if([642] [642] [635] [635] [630] [630] args.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} [645] [645] 42)
[652]      for ([652] final has-declared-initializer dynamic #t8 in [652] [652] block {
[-1]        [-1] final core::Set<core::String> #t9 = [-1] [-1] col::LinkedHashSet::• [-1]<core::String>();
[660]        [660] [660] [-1] [-1] #t9.{core::Set::add}{Invariant}[-1]([660] "length"){(core::String) → core::bool};
[676]        [676] [676] [-1] [-1] #t9.{core::Set::add}{Invariant}[-1]([676] "is"){(core::String) → core::bool};
[688]        [688] [688] [-1] [-1] #t9.{core::Set::add}{Invariant}[-1]([688] "42"){(core::String) → core::bool};
      } =>[-1] [-1] #t9) {
[652]        [652] final core::String #t10 = [652] [652] [652] [652] #t8 as{TypeError} core::String;
[652]        [652] [652] [-1] [-1] #t4.{core::Set::add}{Invariant}[-1]([652] #t10){(core::String) → core::bool};
      }
  } =>[516] [516] #t4;
[708]  [708] [708] core::print [713]([714] fooSet2);
[740]  [740] core::List<core::String> fooList = [750] [750] block {
[750]    [750] final core::List<core::String> #t11 = [750] [750] core::List::of [750]<core::String>([759] args);
[769]    [769] [769] [-1] [-1] #t11.{core::List::add}{Invariant}[-1]([769] "hello"){(core::String) → void};
[796]    [796] [796] [-1] [-1] #t11.{core::List::addAll}{Invariant}[-1]([796] [785] [785]<core::String, core::String>{[789] [786] [786] "x": [791] [791] "y"}.{core::Map::keys}{core::Iterable<core::String>}){(core::Iterable<core::String>) → void};
[806]    for ([818] core::String s in [823] [823] args)
[832]      [832] [832] [-1] [-1] #t11.{core::List::addAll}{Invariant}[-1]([832]<core::String>[[844] "${[842] [842] s}", [860] "${[855] [855] s}_2"]){(core::Iterable<core::String>) → void};
[873]    if([889] [889] [882] [882] [877] [877] args.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} [892] [892] 42)
[899]      [899] [899] [-1] [-1] #t11.{core::List::addAll}{Invariant}[-1]([899]<core::String>[[907] "length", [923] "is", [935] "42"]){(core::Iterable<core::String>) → void};
  } =>[750] [750] #t11;
[955]  [955] [955] core::print [960]([961] fooList);
[994]  [994] core::Map<core::String, core::String> fooMap = [1003] [1003] block {
[1003]    [1003] final core::Map<core::String, core::String> #t12 = [1003] [1003]<core::String, core::String>{};
[1016]    [1016] [1016] [-1] [-1] #t12.{core::Map::[]=}{Invariant}[-1]([1009] "hello", [1018] "world"){(core::String, core::String) → void};
[1031]    for ([1043] core::String s in [1048] [1048] args)
[1057]      [1057] [1057] [-1] [-1] #t12.{core::Map::addAll}{Invariant}[-1]([1057]<core::String, core::String>{[1069] [1069] [1069] "${[1067] [1067] s}": [1079] [1079] "${[1074] [1074] s}_2"}){(core::Map<core::String, core::String>) → void};
[1092]    if([1108] [1108] [1101] [1101] [1096] [1096] args.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} [1111] [1111] 42)
[1118]      [1118] [1118] [-1] [-1] #t12.{core::Map::addAll}{Invariant}[-1]([1118]<core::String, core::String>{[1134] [1126] [1126] "length": [1136] [1136] "42", [1152] [1148] [1148] "is": [1154] [1154] "42", [1170] [1166] [1166] "42": [1172] [1172] "!"}){(core::Map<core::String, core::String>) → void};
  } =>[1003] [1003] #t12;
[1191]  [1191] [1191] core::print [1196]([1197] fooMap);
}
