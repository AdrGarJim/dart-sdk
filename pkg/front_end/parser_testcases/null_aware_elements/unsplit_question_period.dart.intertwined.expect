parseUnit(test1)
  skipErrorTokens(test1)
  listener: beginCompilationUnit(test1)
  syntheticPreviousToken(test1)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(test1)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(test1)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, test1, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test1, topLevelFunctionDeclaration)
        parseMethodTypeVar(test1)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test1, test1, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test1, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralListSetMapOrFunction(return, null)
                          listener: beginTypeArguments(<)
                          listener: handleIdentifier(int, typeReference)
                          listener: handleNoTypeArguments(>)
                          listener: handleType(int, null)
                          listener: endTypeArguments(1, <, >)
                          parseLiteralListSuffix(>, null)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("a")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            listener: handleNullAwareElement(?)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("1")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            listener: handleNullAwareElement(?)
                            listener: handleLiteralList(2, [, null, ])
                ensureSemicolon(])
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test1, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test2)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test2)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test2, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test2, topLevelFunctionDeclaration)
        parseMethodTypeVar(test2)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test2, test2, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test2, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralListSetMapOrFunction(return, null)
                          listener: beginTypeArguments(<)
                          listener: handleIdentifier(int, typeReference)
                          listener: handleNoTypeArguments(>)
                          listener: handleType(int, null)
                          listener: endTypeArguments(1, <, >)
                          parseLiteralSetOrMapSuffix(>, null)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("a")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            listener: handleNullAwareElement(?)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("1")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            listener: handleNullAwareElement(?)
                            listener: handleLiteralSetOrMap(2, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test2, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test3)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test3)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test3, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test3, topLevelFunctionDeclaration)
        parseMethodTypeVar(test3)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test3, test3, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test3, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralListSetMapOrFunction(return, null)
                          listener: beginTypeArguments(<)
                          listener: handleIdentifier(int, typeReference)
                          listener: handleNoTypeArguments(,)
                          listener: handleType(int, null)
                          listener: handleIdentifier(int, typeReference)
                          listener: handleNoTypeArguments(>)
                          listener: handleType(int, null)
                          listener: endTypeArguments(2, <, >)
                          parseLiteralSetOrMapSuffix(>, null)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("a")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            parseExpression(:)
                              parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(:, true, ConstantPatternContext.none)
                                  parsePrimary(:, expression, ConstantPatternContext.none)
                                    parseLiteralInt(:)
                                      listener: handleLiteralInt(0)
                            listener: handleLiteralMapEntry(:, ,, ?, null)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseLiteralInt(,)
                                      listener: handleLiteralInt(0)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("a")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            listener: handleLiteralMapEntry(:, ,, null, ?)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("0")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("a")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            listener: handleLiteralMapEntry(:, ,, ?, ?)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("a")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("0")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            listener: handleLiteralMapEntry(:, ,, ?, ?)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("1")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            rewriter()
                            rewriter()
                            parseExpression(?)
                              parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                                      ensureIdentifier(., expressionContinuation)
                                        listener: handleIdentifier(tryParse, expressionContinuation)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(tryParse)
                                        parseArguments(tryParse)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("1")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(tryParse, ))
                                listener: handleDotShorthandHead(.)
                                listener: handleDotShorthandContext(.)
                            listener: handleLiteralMapEntry(:, ,, ?, ?)
                            listener: handleLiteralSetOrMap(5, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test3, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(test1)
  listener: endCompilationUnit(3, )
