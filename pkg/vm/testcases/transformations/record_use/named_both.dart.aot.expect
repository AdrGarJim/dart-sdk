library #lib;
import self as self;
import "dart:core" as core;
import "package:meta/meta.dart" as meta;

import "package:meta/meta.dart" show RecordUse;

abstract class SomeClass extends core::Object {

  [@vm.inferred-return-type.metadata=int]
  [@vm.unboxing-info.metadata=()->i]
  @#C1
  static method someStaticMethod({[@vm.inferred-arg-type.metadata=dart.core::_Smi] required core::int i, [@vm.inferred-arg-type.metadata=dart.core::_Smi?] core::int? l = #C2, [@vm.inferred-arg-type.metadata=dart.core::_Smi] core::int k = #C3}) → dynamic {
    return [@vm.direct-call.metadata=dart.core::_IntegerImplementation.+] [@vm.inferred-type.metadata=int (skip check)] i.{core::num::+}(1){(core::num) → core::int};
  }
}

[@vm.inferred-return-type.metadata=dart.core::Null? (value: null)]
static method main() → void {
  core::print([@vm.inferred-type.metadata=int] self::SomeClass::someStaticMethod(i: 3));
  core::print([@vm.inferred-type.metadata=int] self::SomeClass::someStaticMethod(i: 5, k: 1));
  core::print([@vm.inferred-type.metadata=int] self::SomeClass::someStaticMethod(i: 5, l: 2));
  core::print([@vm.inferred-type.metadata=int] self::SomeClass::someStaticMethod(i: 5, l: 2, k: 4));
}
constants  {
  #C1 = meta::RecordUse {}
  #C2 = null
  #C3 = 3
}
