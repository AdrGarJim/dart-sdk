library #lib;
import self as self;
import "package:meta/meta.dart" as meta;
import "dart:core" as core;

import "package:meta/meta.dart" show RecordUse;

@#C1
class MyClass extends core::Object /*hasConstConstructor*/  {

  [@vm.inferred-type.metadata=#lib::A (value: const #lib::A{dart.core::_Enum.index: 0, dart.core::_Enum._name: "a"})]
  [@vm.procedure-attributes.metadata=methodOrSetterCalledDynamically:false,getterCalledDynamically:false,hasThisUses:false,hasNonThisUses:false,hasTearOffUses:false,getterSelectorId:1]
  final field self::A a;
}
class A extends core::_Enum /*isEnum*/  {

  [@vm.inferred-return-type.metadata=!]
  [@vm.procedure-attributes.metadata=methodOrSetterCalledDynamically:false,getterCalledDynamically:false,hasNonThisUses:false,hasTearOffUses:false,methodOrSetterSelectorId:2,getterSelectorId:3]
  method core::_enumToString() → core::String
    return "A.${[@vm.direct-call.metadata=dart.core::_Enum._name] this.{core::_Enum::_name}{core::String}}";
}

[@vm.inferred-return-type.metadata=dart.core::Null? (value: null)]
static method main() → void {
  self::doSomething();
}

[@vm.inferred-return-type.metadata=dart.core::Null? (value: null)]
@#C5
static method doSomething() → void {
  core::print("a");
}
constants  {
  #C1 = meta::RecordUse {}
  #C2 = 0
  #C3 = "a"
  #C4 = self::A {index:#C2, _name:#C3}
  #C5 = self::MyClass {a:#C4}
}
